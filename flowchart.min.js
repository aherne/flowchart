class CanvasContext{#config;constructor(canvasID,canvasWidth,canvasHeight,config){this.#config=config;var c=document.getElementById(canvasID);c.width=canvasWidth,c.height=canvasHeight,this.ctx=c.getContext("2d"),this.ctx.clearRect(0,0,canvasWidth,canvasHeight)}#drawLine(movex,movey,x,y){this.ctx.beginPath(),this.ctx.moveTo(movex,movey),this.ctx.lineTo(x,y),this.ctx.stroke()}drawRectangle(x,y,color){this.ctx.lineWidth=1,this.ctx.rect(x,y,this.#config.rectangleWidth,this.#config.rectangleHeight),this.ctx.fillStyle=color,this.ctx.strokeRect(x,y,this.#config.rectangleWidth,this.#config.rectangleHeight),this.ctx.fillRect(x,y,this.#config.rectangleWidth,this.#config.rectangleHeight)}drawText(text,x,y,width,color){this.ctx.font=this.#config.fontFamily,this.ctx.textAlign="center",this.ctx.textBaseline="middle",this.ctx.fillStyle=color||this.#config.fontColor,this.ctx.fillText(text,x,y,width)}drawHorizontalLine(x,y,xMove,color){this.ctx.strokeStyle=color,this.#drawLine(x,y,x+xMove,y),this.ctx.strokeStyle="black"}drawVerticalLine(x,y,yMove,color){this.ctx.strokeStyle=color,this.#drawLine(x,y,x,y+yMove),this.ctx.strokeStyle="black"}drawRightArrow(x,y,color){this.ctx.fillStyle=color,this.ctx.beginPath(),this.ctx.moveTo(x,y),this.ctx.lineTo(x-this.#config.arrowHeight,y-this.#config.arrowWidth),this.ctx.lineTo(x-this.#config.arrowHeight,y+this.#config.arrowWidth),this.ctx.fill(),this.ctx.fillStyle="black"}drawLeftArrow(x,y,color){this.ctx.fillStyle=color,this.ctx.beginPath(),this.ctx.moveTo(x,y),this.ctx.lineTo(x+this.#config.arrowHeight,y-this.#config.arrowWidth),this.ctx.lineTo(x+this.#config.arrowHeight,y+this.#config.arrowWidth),this.ctx.fill(),this.ctx.fillStyle="black"}drawTopArrow(x,y,color){this.ctx.fillStyle=color,this.ctx.beginPath(),this.ctx.moveTo(x,y),this.ctx.lineTo(x-this.#config.arrowWidth,y+this.#config.arrowHeight),this.ctx.lineTo(x+this.#config.arrowWidth,y+this.#config.arrowHeight),this.ctx.fill(),this.ctx.fillStyle="black"}drawBottomArrow(x,y,color){this.ctx.fillStyle=color,this.ctx.beginPath(),this.ctx.moveTo(x,y),this.ctx.lineTo(x+this.#config.arrowWidth,y-this.#config.arrowHeight),this.ctx.lineTo(x-this.#config.arrowWidth,y-this.#config.arrowHeight),this.ctx.fill(),this.ctx.fillStyle="black"}}class Drawer{#elements={};#initialX=5;#initialY=5;#context;#config;constructor(positions,config,canvasID){this.#config=config;let initialY=this.#initialY+config.lineHeight/2;for(var i=0;i<positions.length;i++){let y=initialY+i*(config.rectangleHeight+config.lineHeight);for(var j=0;j<positions[i].length;j++)if(""!=positions[i][j]){let x=this.#initialX+j*(config.rectangleWidth+config.lineWidth);this.#elements[positions[i][j]]={x:x,y:y}}}let canvasWidth=2*this.#initialX+positions[0].length*(config.rectangleWidth+config.lineWidth)-config.lineWidth,canvasHeight=2*initialY+positions.length*(config.rectangleHeight+config.lineHeight)-config.lineHeight;this.#context=new CanvasContext(canvasID,canvasWidth,canvasHeight,config)}#lineHorizontalVerticalHorizontal(from,to,color,offsetFrom,offsetTo,offsetX,isLeftArrow,isLeftDirection){let offset1=isLeftArrow?this.#config.rectangleWidth:0,diff=this.#elements[from].y+offsetFrom*this.#config.rectangleHeight-this.#elements[to].y-offsetTo*this.#config.rectangleHeight,intermediateX=0;isLeftDirection?(intermediateX=this.#elements[from].x-offsetX*this.#config.lineWidth,console.log(intermediateX),this.#context.drawHorizontalLine(this.#elements[from].x,this.#elements[from].y+this.#config.rectangleHeight*offsetFrom,-offsetX*this.#config.lineWidth,color)):(intermediateX=this.#elements[from].x+this.#config.rectangleWidth+offsetX*this.#config.lineWidth,this.#context.drawHorizontalLine(this.#elements[from].x+this.#config.rectangleWidth,this.#elements[from].y+this.#config.rectangleHeight*offsetFrom,offsetX*this.#config.lineWidth,color)),this.#context.drawVerticalLine(intermediateX,this.#elements[to].y+this.#config.rectangleHeight*offsetTo,diff,color),this.#context.drawHorizontalLine(intermediateX,this.#elements[to].y+this.#config.rectangleHeight*offsetTo,this.#elements[to].x+offset1-intermediateX,color),isLeftArrow?this.#context.drawLeftArrow(this.#elements[to].x+offset1,this.#elements[to].y+this.#config.rectangleHeight*offsetTo,color):this.#context.drawRightArrow(this.#elements[to].x,this.#elements[to].y+this.#config.rectangleHeight*offsetTo,color)}#lineVerticalHorizontalVertical(from,to,color,offsetFrom,offsetTo,offsetY,isTopArrow,isTopDirection){let sourceX=this.#elements[from].x+offsetFrom*this.#config.rectangleWidth,sourceY=this.#elements[from].y+(isTopDirection?0:this.#config.rectangleHeight),destinationX=this.#elements[to].x+offsetTo*this.#config.rectangleWidth,destinationY=this.#elements[to].y+(isTopArrow?this.#config.rectangleHeight:0);this.#context.drawVerticalLine(sourceX,sourceY,-offsetY,color),this.#context.drawHorizontalLine(sourceX,sourceY-offsetY,destinationX-sourceX,color),this.#context.drawVerticalLine(destinationX,destinationY,sourceY-offsetY-destinationY,color),isTopArrow?this.#context.drawTopArrow(destinationX,destinationY,color):this.#context.drawBottomArrow(destinationX,destinationY,color)}#lineHorizontalVertical(from,to,color,offsetFrom,offsetTo,isTopArrow,isLeftDirection){let offset1=isTopArrow?this.#config.rectangleHeight:0,offset2=isLeftDirection?0:this.#config.rectangleWidth,ydiff=this.#elements[from].y+offsetFrom*this.#config.rectangleHeight-this.#elements[to].y-offset1,xdiff=this.#elements[to].x-this.#elements[from].x+offsetTo*this.#config.rectangleWidth-offset2;this.#context.drawHorizontalLine(this.#elements[from].x+offset2,this.#elements[from].y+this.#config.rectangleHeight*offsetFrom,xdiff,color),this.#context.drawVerticalLine(this.#elements[to].x+offsetTo*this.#config.rectangleWidth,this.#elements[to].y+offset1,ydiff,color),isTopArrow?this.#context.drawTopArrow(this.#elements[to].x+offsetTo*this.#config.rectangleWidth,this.#elements[to].y+offset1,color):this.#context.drawBottomArrow(this.#elements[to].x+offsetTo*this.#config.rectangleWidth,this.#elements[to].y,color)}#lineVerticalHorizontal(from,to,color,offsetFrom,offsetTo,isLeftArrow,isTopDirection){let ydiff=this.#elements[to].y-this.#elements[from].y+offsetTo*this.#config.rectangleHeight-(isTopDirection?0:this.#config.rectangleHeight),xdiff=this.#elements[to].x-this.#elements[from].x-offsetFrom*this.#config.rectangleWidth+(isLeftArrow?this.#config.rectangleWidth:0);var offset1=isLeftArrow?this.#config.rectangleWidth:0;let offset2=this.#elements[from].x+offsetFrom*this.#config.rectangleWidth;this.#context.drawVerticalLine(offset2,this.#elements[from].y+(isTopDirection?0:this.#config.rectangleHeight),ydiff,color),this.#context.drawHorizontalLine(offset2,this.#elements[from].y+ydiff+(isTopDirection?0:this.#config.rectangleHeight),xdiff,color),isLeftArrow?this.#context.drawLeftArrow(this.#elements[to].x+(isLeftArrow?this.#config.rectangleWidth:0),this.#elements[to].y+this.#config.rectangleHeight*offsetTo,color):this.#context.drawRightArrow(this.#elements[to].x+offset1,this.#elements[to].y+this.#config.rectangleHeight*offsetTo,color)}rectangle(title,color){this.#context.drawRectangle(this.#elements[title].x,this.#elements[title].y,color),this.#context.drawText(title,this.#elements[title].x+this.#config.rectangleWidth/2,this.#elements[title].y+this.#config.rectangleHeight/2,this.#config.rectangleWidth)}text(title,color,offset=.5){this.#context.drawText(title,this.#elements[title].x+this.#config.rectangleWidth/2,this.#elements[title].y+this.#config.rectangleHeight*offset,this.#config.rectangleWidth,color)}lineRightLeft(from,to,color,offset=.5){let diff=this.#elements[to].x-this.#elements[from].x-this.#config.rectangleWidth;this.#context.drawHorizontalLine(this.#elements[from].x+this.#config.rectangleWidth,this.#elements[from].y+this.#config.rectangleHeight*offset,diff,color),this.#context.drawRightArrow(this.#elements[to].x,this.#elements[to].y+this.#config.rectangleHeight*offset,color)}lineLeftRight(from,to,color,offset=.5){let diff=this.#elements[from].x-this.#elements[to].x-this.#config.rectangleWidth;this.#context.drawHorizontalLine(this.#elements[to].x+this.#config.rectangleWidth,this.#elements[to].y+this.#config.rectangleHeight*offset,diff,color),this.#context.drawLeftArrow(this.#elements[to].x+this.#config.rectangleWidth,this.#elements[to].y+this.#config.rectangleHeight*offset,color)}lineTopBottom(from,to,color,offset=.5){let diff=this.#elements[from].y-this.#elements[to].y-this.#config.rectangleHeight;this.#context.drawVerticalLine(this.#elements[from].x+this.#config.rectangleWidth*offset,this.#elements[from].y,-diff,color),this.#context.drawTopArrow(this.#elements[to].x+this.#config.rectangleWidth*offset,this.#elements[to].y+this.#config.rectangleHeight,color)}lineBottomTop(from,to,color,offset=.5){let diff=this.#elements[to].y-this.#elements[from].y-this.#config.rectangleHeight;this.#context.drawVerticalLine(this.#elements[to].x+this.#config.rectangleWidth*offset,this.#elements[to].y,-diff,color),this.#context.drawBottomArrow(this.#elements[to].x+this.#config.rectangleWidth*offset,this.#elements[to].y,color)}lineLeftLineLeft(from,to,color,offsetFrom=.5,offsetTo=.5,offsetX=.5){this.#lineHorizontalVerticalHorizontal(from,to,color,offsetFrom,offsetTo,offsetX,!1,!0)}lineLeftLineRight(from,to,color,offsetFrom=.5,offsetTo=.5,offsetX=.5){this.#lineHorizontalVerticalHorizontal(from,to,color,offsetFrom,offsetTo,offsetX,!0,!0)}lineLeftLineTop(from,to,color,offsetFrom=.5,offsetTo=.5){this.#lineHorizontalVertical(from,to,color,offsetFrom,offsetTo,!1,!0)}lineLeftLineBottom(from,to,color,offsetFrom=.5,offsetTo=.5){this.#lineHorizontalVertical(from,to,color,offsetFrom,offsetTo,!0,!0)}lineRightLineLeft(from,to,color,offsetFrom=.5,offsetTo=.5,offsetX=.5){this.#lineHorizontalVerticalHorizontal(from,to,color,offsetTo,offsetFrom,offsetX,!1,!1)}lineRightLineRight(from,to,color,offsetFrom=.5,offsetTo=.5,offsetX=.5){this.#lineHorizontalVerticalHorizontal(from,to,color,offsetFrom,offsetTo,offsetX,!0,!1)}lineRightLineTop(from,to,color,offsetFrom=.5,offsetTo=.5){this.#lineHorizontalVertical(from,to,color,offsetFrom,offsetTo,!1,!1)}lineRightLineBottom(from,to,color,offsetFrom=.5,offsetTo=.5){this.#lineHorizontalVertical(from,to,color,offsetFrom,offsetTo,!0,!1)}lineTopLineLeft(from,to,color,offsetFrom=.5,offsetTo=.5){this.#lineVerticalHorizontal(from,to,color,offsetFrom,offsetTo,!1,!0)}lineTopLineRight(from,to,color,offsetFrom=.5,offsetTo=.5){this.#lineVerticalHorizontal(from,to,color,offsetFrom,offsetTo,!0,!0)}lineTopLineTop(from,to,color,offsetFrom=.5,offsetTo=.5,offsetY=.5){let finalOffset=this.#elements[to].y>=this.#elements[from].y?this.#config.lineHeight*offsetY:this.#elements[from].y-this.#elements[to].y+this.#config.lineHeight*offsetY;this.#lineVerticalHorizontalVertical(from,to,color,offsetFrom,offsetTo,finalOffset,!1,!0)}lineTopLineBottom(from,to,color,offsetFrom=.5,offsetTo=.5,offsetY=.5){let finalOffset=this.#elements[to].y<=this.#elements[from].y?this.#config.lineHeight*offsetY:this.#elements[from].y-this.#elements[to].y+this.#config.rectangleHeight+this.#config.lineHeight*offsetY;this.#lineVerticalHorizontalVertical(from,to,color,offsetFrom,offsetTo,finalOffset,!0,!0)}lineBottomLineLeft(from,to,color,offsetFrom=.5,offsetTo=.5){this.#lineVerticalHorizontal(from,to,color,offsetFrom,offsetTo,!1,!1)}lineBottomLineRight(from,to,color,offsetFrom=.5,offsetTo=.5){this.#lineVerticalHorizontal(from,to,color,offsetFrom,offsetTo,!0,!1)}lineBottomLineTop(from,to,color,offsetFrom=.5,offsetTo=.5,offsetY=.5){let finalOffset=-(this.#elements[to].y>=this.#elements[from].y?this.#config.lineHeight*offsetY:this.#elements[from].y-this.#elements[to].y+this.#config.lineHeight*offsetY);this.#lineVerticalHorizontalVertical(from,to,color,offsetFrom,offsetTo,finalOffset,!1,!1)}lineBottomLineBottom(from,to,color,offsetFrom=.5,offsetTo=.5,offsetY=.5){let finalOffset=-(this.#elements[to].y>=this.#elements[from].y?this.#config.lineHeight*offsetY+(this.#elements[to].y-this.#elements[from].y):this.#config.lineHeight*offsetY);this.#lineVerticalHorizontalVertical(from,to,color,offsetFrom,offsetTo,finalOffset,!0,!1)}}class Configurer{#data={};setRectangleSizes(width,height){this.#data.rectangleWidth=width,this.#data.rectangleHeight=height}setArrowSizes(width,height){this.#data.arrowWidth=width,this.#data.arrowHeight=height}setLineSizes(width,height){this.#data.lineWidth=width,this.#data.lineHeight=height}setFontInfo(family,color){this.#data.fontFamily=family,this.#data.fontColor=color}getAll(){if(!(this.#data.hasOwnProperty("rectangleWidth")&&this.#data.hasOwnProperty("arrowWidth")&&this.#data.hasOwnProperty("lineWidth")&&this.#data.hasOwnProperty("fontFamily")))throw"Flowchart: using all setters is mandatory";return this.#data}}class Positions{#positions=[];addRow(elements){if(this.#positions.length>0&&this.#positions[this.#positions.length-1].length!=elements.length)throw"Each row must have same columns number";this.#positions.push(elements)}getAll(){if(0==this.#positions.length)throw"Flowchart: at least one row is mandatory";return this.#positions}}
